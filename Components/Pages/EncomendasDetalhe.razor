@using Torres.Data.Controller
@using Torres.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Options;

@inject OrderController OrderController;
@inject HttpClient Http;

<div class="encomendaDetalheDrawer @(isOpen ? "open" : "")">

    <EditForm Model="@encomendaEditada" OnValidSubmit="@HandleValidSubmit" style="background: #f1f1f1; border-radius:20px">
        <DataAnnotationsValidator />
        <div class="d-flex justify-content-between" style="height:70px;">
            <div style="font-size: 30px; align-content: center; font-weight: 600; padding-left: 30px">
                Detalhes da Encomenda
            </div>
            <div style="padding-right:28px; align-content: center;white-space:nowrap">
                <span @onclick=@(async() => {await isEditingCB.InvokeAsync(true); }) class="pe-2" style="cursor:pointer;font-size:25px;color:darkorange">  <i class="fa fa-edit"></i> </span>
                <span @onclick=@(() => {isOpen = false;closeDetalhe.InvokeAsync(false);}) class="pt-2" style="cursor:pointer; font-size:30px; background:#f1f1f1;"> <i class="fa fa-times"></i> </span>
            </div>
        </div>


        <div class="d-flex flex-wrap justify-content-between" style="align-items:center; margin: 14px;background: #f1f1f1;">


            <div class="d-flex flex-wrap flex-grow-1 w-100">

                <div class="d-flex flex-column flex-grow-1 pt-4 pe-2" style="min-width:50%;">

                    <label style="font-weight:700">Nome da Encomenda</label>
                    @if (isEditing)
                    {
                        <input @bind-value=encomendaEditada.EncomendaName style="min-width:350px;" />
                        <ValidationMessage For="@(() => encomendaEditada.EncomendaName)" />
                    }
                    else{
                        <div style="min-width:350px;"> @encomenda.EncomendaName </div>
                    }
                </div>

                <div class="d-flex flex-column flex-grow-1 pt-4 pe-2" style="min-width:50%;">
                    <label style="font-weight:700">Nome do Cliente</label>
                    @if (isEditing)
                    {
                        <input @bind-value=encomendaEditada.CustomerName style="min-width:350px;" />
                        <ValidationMessage For="@(() => encomendaEditada.CustomerName)" />
                    }
                    else
                    {
                        <div style="min-width:350px;"> @encomenda.CustomerName </div>
                    }
                </div>
            </div>

            <div class="d-flex flex-wrap flex-grow-1 w-100" style="">

                <div class="d-flex flex-column flex-grow-1 pt-5 pe-2" style="min-width:50%;">

                    <label style="font-weight:700">Morada</label>
                    @if (isEditing)
                    {
                        <input @bind-value=encomendaEditada.Address style="width:inherit; min-width:350px;" />
                        <ValidationMessage For="@(() => encomendaEditada.Address)" />
                    }
                    else
                    {
                        <div style="min-width:350px;"> @encomenda.Address </div>
                    }
                </div>

                <div class="d-flex flex-column flex-grow-1 pt-5 pe-2" style="min-width:50%;">
                    <label style="font-weight:700">Estado Da Encomenda</label>
                    @if (isEditing)
                    {
                        <select @onchange="@((e) => {encomendaEditada.Status= Convert.ToInt16(e.Value);})" value="@encomendaEditada.Status" style="height:30px;border-radius:16px; padding:1px 4px;min-width:350px;">

                            @foreach (var states in estados)
                            {
                                <option value="@states.Status"> @states.TipoEstado</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => encomendaEditada.Status)" />
                    }
                    else
                    {
                        <div style="min-width:350px;"> @getStatusDescription(encomenda.Status) </div>
                    }
                </div>
            </div>
            <div class="d-flex flex-wrap flex-grow-1" style="">
                <div class="d-flex flex-column w-100 pt-5" style="min-width:250px;">
                    <label style="font-weight:700">Descrição</label>
                    @if (isEditing)
                    {
                        <textarea @bind="encomendaEditada.Descricao" style="max-height: 150px" />
                        <ValidationMessage For="@(() => encomendaEditada.Descricao)" />
                    }
                    else
                    {
                        <div> @encomenda.Descricao</div>
                    }
                </div>
            </div>
            <div class="w-100 pt-5 ">
                <label style="font-weight:700">Data de Criação</label>
                <div> @encomenda.CreatedAt</div>
            </div>


        </div>
        <div class="d-flex justify-content-end pb-3">
            @if(isEditing)
            {
                <div class="pe-3">
                    <button class="saveButtonStyle">
                        Guardar
                    </button>
                </div>

                <div class="pe-3">
                    <button class="cancelButtonStyle" @onclick=@(() => {isEditing=false;OnParametersSetAsync();})>
                        Cancelar
                    </button>
                </div>
            }

        </div>
    </EditForm>
</div>



@code {
    [Parameter]
    public EventCallback<bool> closeDetalhe { get; set; }

    // [Parameter]
    // public EventCallback<Order> EncomendaEditadaComSucesso { get; set; }

    [Parameter]
    public EventCallback<Order> SaveEditEncomenda { get; set; }

    [Parameter]
    public EventCallback<bool> isEditingCB { get; set; }

    [Parameter]
    public bool isOpen { get; set; }

    [Parameter]
    public Order encomenda { get; set; }

    [Parameter]
    public List<EstadoEncomenda> estados { get; set; }

    [Parameter]
    public bool isEditing { get; set; }

    private Order encomendaEditada = new();

    private readonly ApiSettings _apiSettings;

    public EncomendasDetalhe(IOptions<ApiSettings> apiSettings)
    {
        _apiSettings = apiSettings.Value;
    }




    protected override async Task OnParametersSetAsync()
    {
        if (encomendaEditada.ID == 0)
        {
            encomendaEditada = new()
            {
                ID = encomenda.ID,
                EncomendaName = encomenda.EncomendaName,
                CustomerName = encomenda.CustomerName,
                Address = encomenda.Address,
                CreatedAt = encomenda.CreatedAt,
                Descricao = encomenda.Descricao,
                Status = encomenda.Status
            };

        }

    }




    private async void HandleValidSubmit()
    {
        if (!isEditing){ return; }
        await SaveEditEncomenda.InvokeAsync(encomendaEditada);
    }

    private string? getStatusDescription(int status)
    {
        return estados.Where(x => x.Status == status).Select(z => z.TipoEstado).FirstOrDefault();  // retorna a descricao do estado
    }


}


